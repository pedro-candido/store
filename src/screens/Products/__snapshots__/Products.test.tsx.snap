// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Products should copy screen 1`] = `
<View>
  <View
    style={
      {
        "height": "90%",
        "width": 750,
      }
    }
  >
    <View
      style={
        {
          "flex": 1,
          "overflow": "hidden",
        }
      }
    >
      <RCTScrollView
        ListEmptyComponent={[Function]}
        applyWindowCorrection={[Function]}
        bounces={false}
        canChangeSize={true}
        contentContainerStyle={
          {
            "backgroundColor": undefined,
            "minHeight": 1,
            "minWidth": 1,
            "paddingLeft": 20,
            "paddingRight": 20,
          }
        }
        contentHeight={0}
        contentWidth={0}
        data={[]}
        dataProvider={
          DataProvider {
            "_data": [],
            "_firstIndexToProcess": 0,
            "_hasStableIds": false,
            "_requiresDataChangeHandling": false,
            "_size": 0,
            "getStableId": [Function],
            "rowHasChanged": [Function],
          }
        }
        disableRecycling={false}
        estimatedItemSize={200}
        extendedState={{}}
        externalScrollView={[Function]}
        finalRenderAheadOffset={250}
        forceNonDeterministicRendering={true}
        horizontal={false}
        initialOffset={0}
        initialRenderIndex={0}
        isHorizontal={false}
        layoutProvider={
          GridLayoutProviderWithProps {
            "_acceptableRelayoutDelta": 1,
            "_getHeightOrWidth": [Function],
            "_getLayoutTypeForIndex": [Function],
            "_getSpan": [Function],
            "_hasExpired": false,
            "_maxSpan": 2,
            "_setLayoutForType": [Function],
            "_tempDim": {
              "height": 0,
              "width": 0,
            },
            "averageWindow": AverageWindow {
              "currentAverage": 200,
              "currentCount": 1,
              "inputValues": [
                200,
              ],
              "nextIndex": 1,
            },
            "defaultEstimatedItemSize": 100,
            "layoutObject": {
              "size": undefined,
              "span": undefined,
            },
            "props": {
              "ListEmptyComponent": [Function],
              "bounces": false,
              "contentContainerStyle": {
                "padding": 20,
              },
              "data": [],
              "estimatedItemSize": 200,
              "numColumns": 2,
              "renderItem": [Function],
            },
            "renderWindowInsets": {
              "height": 0,
              "width": -40,
            },
            "shouldRefreshWithAnchoring": true,
          }
        }
        maxRenderAhead={750}
        numColumns={2}
        onEndReached={[Function]}
        onEndReachedThreshold={0}
        onEndReachedThresholdRelative={0}
        onItemLayout={[Function]}
        onLayout={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onSizeChanged={[Function]}
        onVisibleIndicesChanged={[Function]}
        removeClippedSubviews={false}
        renderAheadOffset={0}
        renderAheadStep={250}
        renderContentContainer={[Function]}
        renderItem={[Function]}
        renderItemContainer={[Function]}
        rowRenderer={[Function]}
        scrollEventThrottle={16}
        scrollThrottle={16}
        scrollViewProps={
          {
            "contentContainerStyle": {
              "backgroundColor": undefined,
              "minHeight": 1,
              "minWidth": 1,
              "paddingLeft": 20,
              "paddingRight": 20,
            },
            "onLayout": [Function],
            "onScrollBeginDrag": [Function],
            "refreshControl": undefined,
            "style": {
              "minHeight": 1,
              "minWidth": 1,
            },
          }
        }
        style={
          {
            "minHeight": 1,
            "minWidth": 1,
          }
        }
        suppressBoundedSizeException={true}
        windowCorrectionConfig={
          {
            "applyToInitialOffset": true,
            "applyToItemScroll": true,
            "value": {
              "endCorrection": 0,
              "startCorrection": 0,
              "windowShift": -0,
            },
          }
        }
      >
        <View>
          <View
            style={
              {
                "flexDirection": "column",
              }
            }
          >
            <View
              style={
                {
                  "paddingLeft": 20,
                  "paddingTop": 20,
                }
              }
            />
            <View
              style={
                [
                  undefined,
                  undefined,
                ]
              }
            />
            <AutoLayoutView
              enableInstrumentation={false}
              horizontal={false}
              onBlankAreaEvent={[Function]}
              onLayout={[Function]}
              renderAheadOffset={0}
              scrollOffset={0}
              style={
                {
                  "height": 0,
                  "width": 0,
                }
              }
              windowSize={0}
            />
            <View
              style={
                {
                  "flex": 1,
                  "marginHorizontal": "auto",
                }
              }
            >
              <Image
                height={50}
                source={
                  {
                    "uri": "https://i.gifer.com/ZKZg.gif",
                  }
                }
                width={50}
              />
            </View>
            <CellContainer
              index={-1}
              style={
                [
                  undefined,
                  undefined,
                ]
              }
            />
            <View
              style={
                {
                  "paddingBottom": 20,
                  "paddingRight": 20,
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
</View>
`;

exports[`Products should render correctly 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "rgb(242, 242, 242)",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              collapsable={false}
              style={
                {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
            style={
              {
                "height": 44,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-start",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginStart": 0,
                    "opacity": 1,
                  }
                }
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "justifyContent": "center",
                    "marginHorizontal": 16,
                    "maxWidth": 718,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  MockedScreen
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
                style={
                  {
                    "alignItems": "flex-end",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "justifyContent": "center",
                    "marginEnd": 0,
                    "opacity": 1,
                  }
                }
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          gestureResponseDistance={
            {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          onGestureCancel={[Function]}
          pointerEvents="box-none"
          sheetAllowedDetents="large"
          sheetCornerRadius={-1}
          sheetExpandsWhenScrolledToEdge={true}
          sheetGrabberVisible={false}
          sheetLargestUndimmedDetent="all"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                handlerTag={1}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View>
                        <View
                          style={
                            {
                              "height": "90%",
                              "width": 750,
                            }
                          }
                        >
                          <View
                            style={
                              {
                                "flex": 1,
                                "overflow": "hidden",
                              }
                            }
                          >
                            <RCTScrollView
                              ListEmptyComponent={[Function]}
                              applyWindowCorrection={[Function]}
                              bounces={false}
                              canChangeSize={true}
                              contentContainerStyle={
                                {
                                  "backgroundColor": undefined,
                                  "minHeight": 1,
                                  "minWidth": 1,
                                  "paddingLeft": 20,
                                  "paddingRight": 20,
                                }
                              }
                              contentHeight={0}
                              contentWidth={0}
                              data={[]}
                              dataProvider={
                                DataProvider {
                                  "_data": [],
                                  "_firstIndexToProcess": 0,
                                  "_hasStableIds": false,
                                  "_requiresDataChangeHandling": false,
                                  "_size": 0,
                                  "getStableId": [Function],
                                  "rowHasChanged": [Function],
                                }
                              }
                              disableRecycling={false}
                              estimatedItemSize={200}
                              extendedState={{}}
                              externalScrollView={[Function]}
                              finalRenderAheadOffset={250}
                              forceNonDeterministicRendering={true}
                              horizontal={false}
                              initialOffset={0}
                              initialRenderIndex={0}
                              isHorizontal={false}
                              layoutProvider={
                                GridLayoutProviderWithProps {
                                  "_acceptableRelayoutDelta": 1,
                                  "_getHeightOrWidth": [Function],
                                  "_getLayoutTypeForIndex": [Function],
                                  "_getSpan": [Function],
                                  "_hasExpired": false,
                                  "_maxSpan": 2,
                                  "_setLayoutForType": [Function],
                                  "_tempDim": {
                                    "height": 0,
                                    "width": 0,
                                  },
                                  "averageWindow": AverageWindow {
                                    "currentAverage": 200,
                                    "currentCount": 1,
                                    "inputValues": [
                                      200,
                                    ],
                                    "nextIndex": 1,
                                  },
                                  "defaultEstimatedItemSize": 100,
                                  "layoutObject": {
                                    "size": undefined,
                                    "span": undefined,
                                  },
                                  "props": {
                                    "ListEmptyComponent": [Function],
                                    "bounces": false,
                                    "contentContainerStyle": {
                                      "padding": 20,
                                    },
                                    "data": [],
                                    "estimatedItemSize": 200,
                                    "numColumns": 2,
                                    "renderItem": [Function],
                                  },
                                  "renderWindowInsets": {
                                    "height": 0,
                                    "width": -40,
                                  },
                                  "shouldRefreshWithAnchoring": true,
                                }
                              }
                              maxRenderAhead={750}
                              numColumns={2}
                              onEndReached={[Function]}
                              onEndReachedThreshold={0}
                              onEndReachedThresholdRelative={0}
                              onItemLayout={[Function]}
                              onLayout={[Function]}
                              onScroll={[Function]}
                              onScrollBeginDrag={[Function]}
                              onSizeChanged={[Function]}
                              onVisibleIndicesChanged={[Function]}
                              removeClippedSubviews={false}
                              renderAheadOffset={0}
                              renderAheadStep={250}
                              renderContentContainer={[Function]}
                              renderItem={[Function]}
                              renderItemContainer={[Function]}
                              rowRenderer={[Function]}
                              scrollEventThrottle={16}
                              scrollThrottle={16}
                              scrollViewProps={
                                {
                                  "contentContainerStyle": {
                                    "backgroundColor": undefined,
                                    "minHeight": 1,
                                    "minWidth": 1,
                                    "paddingLeft": 20,
                                    "paddingRight": 20,
                                  },
                                  "onLayout": [Function],
                                  "onScrollBeginDrag": [Function],
                                  "refreshControl": undefined,
                                  "style": {
                                    "minHeight": 1,
                                    "minWidth": 1,
                                  },
                                }
                              }
                              style={
                                {
                                  "minHeight": 1,
                                  "minWidth": 1,
                                }
                              }
                              suppressBoundedSizeException={true}
                              windowCorrectionConfig={
                                {
                                  "applyToInitialOffset": true,
                                  "applyToItemScroll": true,
                                  "value": {
                                    "endCorrection": 0,
                                    "startCorrection": 0,
                                    "windowShift": -0,
                                  },
                                }
                              }
                            >
                              <View>
                                <View
                                  style={
                                    {
                                      "flexDirection": "column",
                                    }
                                  }
                                >
                                  <View
                                    style={
                                      {
                                        "paddingLeft": 20,
                                        "paddingTop": 20,
                                      }
                                    }
                                  />
                                  <View
                                    style={
                                      [
                                        undefined,
                                        undefined,
                                      ]
                                    }
                                  />
                                  <AutoLayoutView
                                    enableInstrumentation={false}
                                    horizontal={false}
                                    onBlankAreaEvent={[Function]}
                                    onLayout={[Function]}
                                    renderAheadOffset={0}
                                    scrollOffset={0}
                                    style={
                                      {
                                        "height": 0,
                                        "width": 0,
                                      }
                                    }
                                    windowSize={0}
                                  />
                                  <View
                                    style={
                                      {
                                        "flex": 1,
                                        "marginHorizontal": "auto",
                                      }
                                    }
                                  >
                                    <Image
                                      height={50}
                                      source={
                                        {
                                          "uri": "https://i.gifer.com/ZKZg.gif",
                                        }
                                      }
                                      width={50}
                                    />
                                  </View>
                                  <CellContainer
                                    index={-1}
                                    style={
                                      [
                                        undefined,
                                        undefined,
                                      ]
                                    }
                                  />
                                  <View
                                    style={
                                      {
                                        "paddingBottom": 20,
                                        "paddingRight": 20,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                            </RCTScrollView>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </RNCSafeAreaProvider>
</View>
`;
